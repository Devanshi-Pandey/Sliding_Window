//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0)
        {
            
            int N=sc.nextInt();
            int K=sc.nextInt();
            ArrayList<Integer> Arr = new ArrayList<Integer>(N); 
  
            // Appending new elements at 
            // the end of the list 
            for (int i = 0; i < N; i++) {
                int x = sc.nextInt();
                Arr.add(x); 
            }

            Solution ob = new Solution();
            System.out.println(ob.maximumSumSubarray(K,Arr,N));
        }
    }
}

// } Driver Code Ends

//User function Template for Java

//THIS IS BRUTEFORCE APPROACH AND HERE TIME LIMIT EXCEEDS
class Solution{
    static long maximumSumSubarray(int K, ArrayList<Integer> Arr,int N){
        int i,j;
        long sum=0,ans=0;
        for(i=0;i<=N-K;i++){
            sum=0;
            for(j=i;j<i+K;j++){
                sum+=Arr.get(j);
            }
            if(sum>ans)
            ans=sum;
        }
        return ans ;
    }
}
//RUNTIME COMPLEXITY : O(N*K) AND IN WORST CASE IT IS O(N^2)
//QUESTION IS HERE HOW CAN WE REDUCE THE RUNTIME COMPLEXITY
//OBSERVE THE CODE
//SEE WHICH PART OF CODE IS REPEATING AND WE CAN AVOID REPEATED CALCULATIONS
/*  for(j=i+1;j<i+K;j++){
            sum+=Arr.get(j);
            }
*/
// WE CAN AVOID REPEATED SUM BY CALCULATING SUM AND IN O(1) TIME ADDITION OF ONE ELEMENT AND DELETION OF ONE ELEMENT CAN BE DONE
// OPTIMIZED CODE

//User function Template for Java
class Solution{
    static long maximumSumSubarray(int K, ArrayList<Integer> Arr,int N){
        int start=0,end=0;
        long sum=0,ans=0;
        while(end<N){
            sum+=(Arr.get(end));
            if(end-start+1==K){
                ans=Math.max(ans,sum);
                sum-=(Arr.get(start));
                start+=1;
            }
            end+=1;
        }
        return ans ;
    }
}
//RUNTIME COMPLEXITY: O(N)
//WE HAVE USED SLIDING WINDOW TECHNIQUE( FIXED SIZE WINDOW ) FOR CALCULATING SUM OF SUBARRAYS
